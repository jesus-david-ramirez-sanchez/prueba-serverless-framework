# serverless.yml
service: library-shop-api
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  profile: default
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    BOOKS_TABLE_NAME: ${self:service}-books-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-books-${self:provider.stage}"

functions:
  createBook:
    handler: src/functions/createBook/index.handler
    events:
      - http:
          path: /books
          method: post
          cors: true
    environment:
      BOOKS_TABLE_NAME: ${self:provider.environment.BOOKS_TABLE_NAME}
      STAGE: ${self:provider.environment.STAGE}

  getBooks:
    handler: src/functions/getBooks/index.handler
    events:
      - http:
          path: /books
          method: get
          cors: true
    environment:
      BOOKS_TABLE_NAME: ${self:provider.environment.BOOKS_TABLE_NAME}
      STAGE: ${self:provider.environment.STAGE}

  updateBook:
    handler: src/functions/updateBook/index.handler
    events:
      - http:
          path: /books/{id}
          method: put
          cors: true
    environment:
      BOOKS_TABLE_NAME: ${self:provider.environment.BOOKS_TABLE_NAME}
      STAGE: ${self:provider.environment.STAGE}

  deleteBook:
    handler: src/functions/deleteBook/index.handler
    events:
      - http:
          path: /books/{id}
          method: delete
          cors: true
    environment:
      BOOKS_TABLE_NAME: ${self:provider.environment.BOOKS_TABLE_NAME}
      STAGE: ${self:provider.environment.STAGE}

resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BOOKS_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: isbn
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: isbn-index
            KeySchema:
              - AttributeName: isbn
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

# Configuraci√≥n para despliegue directo